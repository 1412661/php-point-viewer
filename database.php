<?php/*	Đây là file cung cấp chức năng Quản lí cơ sở dữ liệu, gồm các thao tác có liên quan đến cơ sở dữ liệu MySQL*/
session_start();include_once('config/config.php');include_once('function/function.php');include_once('class/mysql.php');include_once('class/xtemplate/xtemplate.class.php');include_once('class/excel_reader2.php');if (!RUNTIME_DEV_MODE) {	error_reporting(E_ERROR | E_WARNING | E_PARSE);}$sql = new MySQL();save_user_ip();if (RUNTIME_MOBILE_DETECT) {	$tpl = new XTemplate('template/mobile/database.tpl');} else {	$tpl = new XTemplate('template/database.tpl');}switch ($_GET['action']) {	case 'view_db':		$db_id = $_GET['db_id'];				if (!var_set($db_id)) {			outpage('Bạn chưa nhập Database ID');		} elseif (!is_number($db_id)) {			outpage('ID cơ sở dữ liệu phải là số nguyên !');		} else {			$search = $sql->setquery('SELECT * FROM `db_info` WHERE `id` = '.$db_id);			if (mysql_num_rows($search) == 0) {				outpage('Không tìm thấy cơ sở dữ liệu có ID là ['.$db_id.']');			} else {				$sql->log('VIEW DATABASE', 'Database ID: ['.$db_id.']');								$table_header = array('Số báo danh', 'Tên học sinh', 'Lớp');				$db_info = mysql_fetch_assoc($search);								$tpl->assign('db_id', $db_info['id']);	//$tpl->assign('db_id', $db_id);				$tpl->assign('db_name', $db_info['name']);				$tpl->assign('db_year', $db_info['year']);				$tpl->assign('db_subject', $db_info['subject']);				$tpl->assign('db_row_count', $db_info['row_count']);				$tpl->assign('db_comment', $db_info['comment']);				$tpl->assign('db_time', $db_info['time']);				$subject_arr = explode('|', $db_info['subject']);				foreach($subject_arr as $sub) {					$table_header[] = $sub;					$table_header[] = 'Mã đề';				}								foreach($table_header as $header) {					$tpl->set_autoreset();										$tpl->assign('table_header', $header);					$tpl->parse('main.view_db.table_header');				}								$result = $sql->setquery('SELECT * FROM database_'.$db_id);				$stt = 1;								while ($data = mysql_fetch_row($result)) {					$tpl->set_autoreset();					for ($i = 0; $i <= count($table_header)-1; $i++) {						$tpl->set_autoreset();												switch ($i) {							case 0:								$tpl->assign('content', $data[$i]);								break;							case 1:								$tpl->assign('content', '<div class="left">'.standard_name($data[$i]).'</div>');								break;							case 2:								$tpl->assign('content', $data[$i]);								break;							default:								if (($i % 2) == 0) {									if (intval($data[$i]) == 0) {										$tpl->assign('content', null);									} else {										$tpl->assign('content', $data[$i]);									}								} else {									if (intval($data[$i]) == 0) {										$tpl->assign('content', null);									} else {										$tpl->assign('content', number_format($data[$i], 1));									}								}								break;						}						$tpl->parse('main.view_db.table_row.table_col');					}					$tpl->assign('stt', $stt++);					$tpl->parse('main.view_db.table_row');				}			}		}				$tpl->assign('dynamic_title', '- Xem toàn bộ cơ sở dữ liệu: '.$db_info['name'].' ['.$db_info['comment'].'] năm học '.$db_info['year']);				$tpl->assign('fb_link', SITE.'link.php?link='.base64_encode($_SERVER['REQUEST_URI']));		$tpl->assign('fb_title', 'PHPPV - Xem toàn bộ cơ sở dữ liệu');		$tpl->assign('fb_descr', 'Cơ sở dữ liệu: '.$db_info['name'].' ['.$db_info['comment'].'] năm học '.$db_info['year']);				$tpl->parse('main.view_db');				break;
	case 'view_list':		$search = $sql->setquery('SELECT * FROM `db_info` ORDER BY `id` ASC');		if (mysql_num_rows($search) == 0) {			$tpl->parse('main.view_list.db_not_found');		} else {			page_view(true, true, false);			$sql->log('VIEW LIST DATABASE', null);						$stt = 1;			while ($data = mysql_fetch_assoc($search)) {				$tpl->set_autoreset();								$tpl->assign('view_db_list', 'database.php?action=view_db&amp;db_id='.$data['id']);				$tpl->assign('stt', $stt++);				$tpl->assign('db_id', $data['id']);				$tpl->assign('db_name', $data['name']);				$tpl->assign('db_year', $data['year']);				$tpl->assign('db_subject', str_replace('|', ' | ', $data['subject']));				$tpl->assign('db_comment', $data['comment']);				$tpl->assign('db_last_update', $data['time']);								$tpl->parse('main.view_list.db_row');			}		}		$tpl->assign('dynamic_title', '- Tra cứu danh sách cơ sở dữ liệu');				$tpl->assign('fb_link', SITE.'link.php?link='.base64_encode($_SERVER['REQUEST_URI']));		$tpl->assign('fb_title', 'PHPPV - Tra cứu danh sách cơ sở dữ liệu');		$tpl->assign('fb_descr', '[Không có mô tả]');				$tpl->parse('main.view_list');		break;
	case 'manage_db':		if (!var_set($_SESSION['login'])) {			outpage('Bạn phải đăng nhập mới được sử dụng chức năng này !');		}		if ($_POST['deletedb'] == 'OK') {			if (count($_POST['del']) == 0) {				$tpl->assign('update_db_error', 'Bạn chưa chọn cơ sở dữ liệu nào !');				$tpl->parse('main.manage_db.update_db_error');			} else {				for ($i = 0; $i <= count($_POST['del']); $i++) {					del_file('backup_db/', $_POST['del'][$i]);				}				$tpl->assign('mess', 'Xóa bản sao lưu cơ sở dữ liệu thành công !');								$tpl->parse('main.manage_db.backup_db_success');			}		}				########	Update Database		#########################		########################################################		if (($_GET['task'] == 'update_db') and (($_POST['submit']) == 'update_db')) {			$upload_error = upload_file_error($_FILES['update_db']['error']);			$upload_file_size = round(intval($_FILES['update_db']['size'])/1024, 0);						function return_error($error) {				global $tpl;								$tpl->assign('update_db_error', $error);				$tpl->parse('main.manage_db.update_db_error');			}						if (SETUP_DB_MAX_FILE_SIZE > get_upload_max_filesize_in_php_dot_ini()) {				return_error('Dung lượng file upload tối đa bạn cài đặt vượt quá dung lượng quy định của PHP');			} elseif ($upload_error) {				return_error($upload_error);			} elseif (!var_set($_POST['db_name'])) {				return_error('Bạn chưa nhập tên cơ sở dữ liệu');			} elseif (!var_set($_POST['db_year'])) {				return_error('Bạn chưa nhập năm học hiện tại');			} elseif (count($_POST['subject']) == 0) {				return_error('Bạn chưa chọn môn học có trong cơ sở dữ liệu.');			} elseif (!var_set($_POST['db_row_count'])) {				return_error('Bạn chưa nhập số dòng trong cơ sở dữ liệu.');			} elseif ($upload_file_size > SETUP_DB_MAX_FILE_SIZE) {				return_error('Kích thước file tối đa cho phép là '.SETUP_DB_MAX_FILE_SIZE.' KB');			} elseif (!exist_dir(UPLOAD_FOLDER)) {				return_error('Thư mục chứa file được upload lên server không tồn tại hoặc không thể truy cập được.');			} else {			##########################################################################				$upload_check = true;				include('upload.php');		//work as a function								if ($upload_error) {					return_error($upload_error);				} else {					$search = $sql->setquery('SELECT `id` FROM `db_info` ORDER BY `id` DESC');					if (!mysql_num_rows($search)) {						$db_id = 1;					} else {						$result = mysql_fetch_array($search);						$db_id = intval($result[0]) + 1;					}										$db_name = sql_filter($_POST['db_name']);					$db_year = sql_filter($_POST['db_year']);										$db_subject = implode($_POST['subject'], '|');					$db_subject_ = $db_subject;					for ($i = 0; $i <= (count($subject)-1); $i++) {						$db_subject[$i] = sql_filter($db_subject[$i]);					}										$db_row_count = intval($_POST['db_row_count']);					$db_comment = sql_filter(clear_space($_POST['db_comment']));															$tpl->assign('db_uploaded_id', $db_id);					$tpl->parse('main.manage_db.update_db_success');										$sql->log('DATABASE UPDATED', 'Tên file: ['.$dest_filename.'], Kích thước: ['.$upload_file_size.' KB], Tên cơ sở dữ liệu: ['.$db_name.'], Năm học: ['.$db_year.'], Ghi chú: ['.$db_comment.'], Môn học: ['.$db_subject_.']');										##############################################					######			Update db_info			######					##############################################\					$sql->setquery('INSERT INTO `db_info` VALUES ("'.$db_id.'", "'.$db_name.'", "'.$db_year.'", "'.$db_subject.'", "'.$db_row_count.'", "'.$db_comment.'", "'.current_time().'");');										##################################################################					########		IMPORT DATABASE TO MYSQL 				##########					##################################################################					$arr_sid = unserialize(SUBJECT);					$field = null;					foreach ($_POST['subject'] as $sub) {						$sid = 'sid'.$arr_sid[$sub];						$md = 'md_'.$sid;						$field .= "$sid varchar(10) NOT NULL, $md varchar(10),";					}					$field = 'sbd varchar(10) NOT NULL, hsname varchar(255) NOT NULL, class varchar(10) NOT NULL,'.$field;					$query = "CREATE TABLE database_$db_id ($field PRIMARY KEY (sbd)) ENGINE=MyISAM DEFAULT CHARSET=utf8;";					$sql->setquery($query);										$count_col = 3 + count($_POST['subject'])*2;					$count_row = $_POST['db_row_count'];															if ($file_ext == 'csv') {						$file = file(UPLOAD_FOLDER.$dest_filename);												$i = 1;						debug($file);						foreach ($file as $offset => $val) {							$data_ = str_replace(' ;', ';', rtrim(clear_space($file[$offset]), ';'));							$data[$i] = explode_(';', $data_);							$i++;													}						debug($data);						//return $data					} elseif ($file_ext == 'xls') {						$data_ = new Spreadsheet_Excel_Reader(UPLOAD_FOLDER.$dest_filename, true , 'UTF-8');												for ($i = 1; $i <= $count_row; $i++) {							for ($k = 1; $k <= $count_col; $k++) {								$data[$i][$k] = clear_space($data_->val($i, $k));							}						}						//return $data					}										for ($row = 1; $row <= $count_row; $row++) {						$field = null;						for ($col = 1; $col <= $count_col; $col++) {							$data_ = $data[$row][$col];							$field .= '"'.$data_.'",';						}						$field = substr($field, 0, -1);												$sql->setquery("INSERT INTO database_$db_id VALUES ($field);");					}										############################################################					############	END IMPORT DB TO MYSQL DATABASE		########					########################################################				}			}		}		#########	Backup Database	##########		if ($_GET['task'] == 'backup_db') {			if ((!var_set($_POST['tables'])) or (count($_POST['tables']) == 0)) {				$tpl->assign('mess', 'Lỗi trong quá trình backup cơ sở dữ liệu');				$tpl->assign('backup_db_error', 'Bạn phải phải chọn ít nhất một table để sao lưu');				$tpl->parse('main.manage_db.backup_db_error');			} elseif (!var_set($_POST['filetype'])) {				$tpl->assign('mess', 'Lỗi trong quá trình sao lưu cơ sở dữ liệu');				$tpl->assign('backup_db_error', 'Bạn chưa chọn kiểu đữ liệu lưu trữ');				$tpl->parse('main.manage_db.backup_db_error');			} elseif ((!var_set($_POST['storage'])) or (count($_POST['storage']) == 0)) {				$tpl->assign('mess', 'Lỗi trong quá trình backup cơ sở dữ liệu');				$tpl->assign('backup_db_error', 'Bạn chưa chọn nơi lưu trữ');				$tpl->parse('main.manage_db.backup_db_error');			} elseif ((!var_set($_POST['content'])) or (count($_POST['content']) == 0)) {				$tpl->assign('mess', 'Lỗi trong quá trình backup cơ sở dữ liệu');				$tpl->assign('backup_db_error', 'Bạn chưa chọn dữ liệu được sao lưu');				$tpl->parse('main.manage_db.backup_db_error');			} else {				$content = clear_spec_char(str_replace(' ', null, $_POST['content']));								if ((in_array('structure', $content)) and (in_array('data', $content))) {					$method = 'all';					$content = 'structure and data';				} else {					$method = $content[0];					$content = $content[0];				}						if (count($_POST['tables']) == mysql_num_rows($sql->setquery('SHOW TABLES'))) {					$tables = '*';					$sql_dump = sql_dump($tables, $method);				} else {					$tables = $_POST['tables'];					$sql_dump = null;					for ($i = 0; $i <= count($tables)-1; $i++) {						$sql_dump .= sql_dump($tables[$i], $method);					}				}								$filetype = clear_spec_char(str_replace(' ', null, $_POST['filetype']));				$storage = clear_spec_char(str_replace(' ', null, $_POST['storage']));				$storage_ = implode(' , ', $_POST['storage']);								if ($tables <> '*') {					$tables = implode(' , ', $tables);				}								$sql->log('BACKUP DATABASE', 'Định dạng sao lưu: ['.$filetype.'], Nơi lưu trữ: ['.$storage_.'], Phạm vi sao lưu: ['.$content.'], Nội dung sao lưu: ['.$tables.']');								if ($filetype == 'sql') {					$filename = 'BackupDB_'.SQL_DB.'_'.date('d.m.Y_H.i.s').'.sql';										if (in_array('online', $storage)) {						$handle = fopen('backup_db/'.$filename,'w+');						fwrite($handle, pack('CCC', 0xef, 0xbb, 0xbf));	//write file with UFT-8 encoding						fwrite($handle, $sql_dump); 						fclose($handle);					} else {						Header("Content-Disposition: attachment; filename='$filename'");						Header('Content-Type: text/plain');						echo $sql_dump;						die();					}				}								if ($filetype == 'gz') {										$filename = 'BackupDB_'.SQL_DB.'_'.date('d.m.Y_H.i.s').'.sql.gz';									$handle = gzopen('backup_db/'.$filename, 'w9');					gzwrite($handle, $sql_dump); 					gzclose($handle);										if (in_array('offline', $storage)) {						Header('Content-Disposition: attachment; filename="'.$filename.'"');						Header('Content-Type: application/x-gzip');						echo file_get_contents('backup_db/'.$filename);
						unlink('backup_db/'.$filename);						die();					}
				}
				$tpl->assign('mess', 'Đã sao lưu thành công cơ sở dữ liệu');
				$tpl->parse('main.manage_db.backup_db_success');
			}
		}
		########	SQL set query		########################
		########################################################		if (($_GET['task'] == 'setquery') and ($_POST['submit'] == 'setquery')) {			$sql->log('SQL QUERY', 'Lệnh truy vấn: ['.$_POST['query'].'], Tên tài khoản: ['.$_SESSION['user'].'], Cho phép truy vấn: '.RUNTIME_SQL_QUERY);						if (!RUNTIME_SQL_QUERY) {				$tpl->assign('query_error', 'Chức năng này đang bị tắt');				$tpl->parse('main.manage_db.query_error');			} else {				$query = $sql->setquery($_POST['query']);								if (($query == true) and is_bool($query)) {					$tpl->parse('main.manage_db.query_success_mess');				} elseif (!is_resource($query)) {					$tpl->assign('query_error', $query);					$tpl->parse('main.manage_db.query_error');				} elseif (mysql_num_rows($query) == 0) {					$tpl->assign('query_error', 'Không có dữ liệu được trả về với truy vấn của bạn');					$tpl->parse('main.manage_db.query_error');				} else {					while ($data = mysql_fetch_assoc($query)) {						$result[] = $data;					}					foreach ($result[0] as $table_header => $val) {						$tpl->set_autoreset();												$tpl->assign('header', $table_header);						$tpl->parse('main.manage_db.query_success.sql_result_header');					}										for ($i = 0; $i <= (count($result)-1); $i++) {						$tpl->set_autoreset();						foreach ($result[$i] as $table_header => $val) {						$tpl->set_autoreset();												$tpl->assign('content', $val);						$tpl->parse('main.manage_db.query_success.sql_result_row.sql_result_col');						}						$tpl->parse('main.manage_db.query_success.sql_result_row');					}					$tpl->parse('main.manage_db.query_success');				}			}		}				######################################################		######################################################		//Task update db		$tpl->assign('update_db_max_file_size', SETUP_DB_MAX_FILE_SIZE.' KB');		$tpl->assign('update_db_allow_ext', 'xls|csv');				//Task backup_db + empty_backup_db		$db_list = file_list('backup_db/');		if ($db_list) {			for ($i = 0; $i <= (count($db_list)-1); $i++) {				if (($db_list[$i] <> 'index.html') and ($db_list[$i] <> 'readme.txt')) {					$tpl->set_autoreset();						$tpl->assign('file_location', $db_list[$i]);					$tpl->assign('id', i+1);					$tpl->parse('main.manage_db.backup_db_list');				}			}		} else {			$tpl->parse('main.manage_db.backup_db_list_empty');		}				//Task setquery		$table_list = $sql->setquery('SHOW TABLES');				$tpl->assign('backup_db_list_count', mysql_num_rows($table_list));		$tpl->parse('main.spec_function');				while ($table = mysql_fetch_row($table_list)) {			$tpl->set_autoreset();						$tpl->assign('table_name', $table[0]);			if ((isset($_POST['tables'])) and (is_array($_POST['tables'])) and (count($_POST['tables']) > 0)) {				if (in_array($table[0], $_POST['tables'])) {					if (RUNTIME_MOBILE_DETECT) {						$tpl->assign('table_name_check', 'checked="checked"');					} else {						$tpl->assign('table_name_check', 'selected="selected"');					}				} else {					$tpl->assign('table_name_check', null);				}			}						$tpl->parse('main.manage_db.sql_table_list');			$tpl->parse('main.manage_db.backup_db_table_list');		//show table list for backup_db					}		$tpl->assign('current_db', SQL_DB);				#######################################################		###########################################################				replace_input_manage_db($tpl);				$tpl->parse('main.manage_db');				break;	default: header('Location: database.php?action=view_list');}$sql->close();define('TIME_END', microtime(true));$sec =	round(TIME_END-TIME_START, 4);$tpl->assign('sec', $sec);$tpl->assign('current_date', current_date());$tpl->parse('main');$tpl->out('main');?>