<?php#########		MAIN FUNCTION		############################################################################################################function each_hs_10p($class) {	$arr_class_point = arr_class_point($class);		$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] == 10) {			$count++;		}	}		return $count*EACH_HS_10P;}function each_hs_8p_10p($class) {	$arr_class_point = arr_class_point($class);	$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if (($arr_class_point[$i] >= 8) and ($arr_class_point[$i] < 10)) {			$count++;		}	}		return $count*EACH_HS_8P_10P;}function each_l5p($class) {	$arr_class_point = arr_class_point($class);	$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] < 5) {			$count++;		}	}		return $count*EACH_L5P;}function hs_top_1_red($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['last'], 1);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_1_RED;		}	}	return 0;}function hs_top_2_red($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['last'], 2);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_2_RED;		}	}	return 0;}function hs_top_3_red($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['last'], 3);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_3_RED;		}	}	return 0;}function hs_top_red($class) {	global $top_hs_dtb;		$i = 1;	$count_time = 0;	foreach ($top_hs_dtb['last'] as $sbd => $point) {		if ((sbd2class($sbd) == $class) and ($i > 3)) {			$count_time++;		}		$i++;	}	return $count_time*HS_TOP_RED;}function class_top_lpoint($class) {	global $class_dtb;		asort($class_dtb);		foreach ($class_dtb as $class_ => $dtb) {		if ($class_ == $class) {			return CLASS_TOP_LPOINT;		} else {			return 0;		}		break;	}}function class_top_hvariance($class) {	global $class_variance;		foreach ($class_variance as $class_ => $dtb) {		if ($class_ == $class) {			return CLASS_TOP_HVARIANCE;		} else {			return 0;		}		break;	}}function class_top_l5p_1($class) {	global $top3_class_5p, $class_top_5p;		if ($class_top_5p[$class] == 0) {return false;}		if ($class_top_5p[$class] == $top3_class_5p[0]) {		return true;	} else {		return false;	}}function class_top_l5p_2($class) {	global $top3_class_5p, $class_top_5p;		if ($class_top_5p[$class] == 0) {return false;}		if ($class_top_5p[$class] == $top3_class_5p[1]) {		return true;	} else {		return false;	}}function class_top_l5p_3($class) {	global $top3_class_5p, $class_top_5p;		if ($class_top_5p[$class] == 0) {return false;}		if ($class_top_5p[$class] == $top3_class_5p[2]) {		return true;	} else {		return false;	}}function each_class_top_2hs_l($class) {	global $top_hs_dtb;		$top3_h[] = arr_cut($top_hs_dtb['last'], 1);	$top3_h[] = arr_cut($top_hs_dtb['last'], 2);	$top3_h[] = arr_cut($top_hs_dtb['last'], 3);	$count = 0;	for ($i = 0; $i <= 2; $i++) {		foreach ($top3_h[$i] as $sbd => $point) {			if (sbd2class($sbd) == $class) {				$count++;			}		}	}		if ($count == 2) {		return true;	} else {		return false;	}}function each_class_top_3hs_l($class) {	global $top_hs_dtb;		$top3_h[] = arr_cut($top_hs_dtb['last'], 1);	$top3_h[] = arr_cut($top_hs_dtb['last'], 2);	$top3_h[] = arr_cut($top_hs_dtb['last'], 3);	$count = 0;	for ($i = 0; $i <= 2; $i++) {		foreach ($top3_h[$i] as $sbd => $point) {			if (sbd2class($sbd) == $class) {				$count++;			}		}	}		if ($count == 3) {		return true;	} else {		return false;	}}function hs_top_1_green($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['first'], 1);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_1_GREEN;		}	}	return 0;}function hs_top_2_green($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['first'], 2);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_2_GREEN;		}	}	return 0;}function hs_top_3_green($class) {	global $top_hs_dtb;		$top = arr_cut($top_hs_dtb['first'], 3);	foreach ($top as $sbd => $point) {		if (sbd2class($sbd) == $class) {			return HS_TOP_3_GREEN;		}	}	return 0;}function hs_top_green($class) {	global $top_hs_dtb;		$i = 1;	$count_time = 0;	foreach ($top_hs_dtb['first'] as $sbd => $point) {		if ((sbd2class($sbd) == $class) and ($i > 3)) {			$count_time++;		}		$i++;	}		return $count_time*HS_TOP_GREEN;}function class_top_hpoint($class) {	global $class_dtb;		arsort($class_dtb);		foreach ($class_dtb as $class_ => $dtb) {		if ($class_ == $class) {			return CLASS_TOP_HPOINT;		} else {			return 0;		}		break;	}}function class_top_lvariance($class) {	global $class_variance;		asort($class_variance);	foreach ($class_variance as $class_ => $dtb) {		if ($class_ == $class) {			return CLASS_TOP_LVARIANCE;		} else {			return 0;		}		break;	}}function class_top_10p_1($class) {	global $top3_class_10p, $class_top_10p;		if ($class_top_10p[$class] == 0) {return false;}		if ($class_top_10p[$class] == $top3_class_10p[0]) {		return true;	} else {		return false;	}}function class_top_10p_2($class) {	global $top3_class_10p, $class_top_10p;		if ($class_top_10p[$class] == 0) {return false;}		if ($class_top_10p[$class] == $top3_class_10p[1]) {		return true;	} else {		return false;	}}function class_top_10p_3($class) {	global $top3_class_10p, $class_top_10p;		if ($class_top_10p[$class] == 0) {return false;}		if ($class_top_10p[$class] == $top3_class_10p[2]) {		return true;	} else {		return false;	}}function class_top_8p_10p_1($class) {	global $top3_class_8p_10p, $class_top_8p_10p;		if ($class_top_8p_10p[$class] == 0) {return false;}		if ($class_top_8p_10p[$class] == $top3_class_8p_10p[0]) {		return true;	} else {		return false;	}}function class_top_8p_10p_2($class) {	global $top3_class_8p_10p, $class_top_8p_10p;		if ($class_top_8p_10p[$class] == 0) {return false;}		if ($class_top_8p_10p[$class] == $top3_class_8p_10p[1]) {		return true;	} else {		return false;	}}function class_top_8p_10p_3($class) {	global $top3_class_8p_10p, $class_top_8p_10p;		if ($class_top_8p_10p[$class] == 0) {return false;}		if ($class_top_8p_10p[$class] == $top3_class_8p_10p[2]) {		return true;	} else {		return false;	}}function each_class_no_5p($class) {	$arr_class_point = arr_class_point($class);	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] < 5) {			return 0;		}	}		return EACH_CLASS_NO_5P;}function each_class_80per_65p($class) {	global $count_hs, $db_info;		$count_subject = count(explode('|', $db_info['subject']));		$arr_class_point = arr_class_point($class);	$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] >= 6.5) {			$count++;		}	}		$percent = percent($count, $count_hs[$class]*$count_subject, false);		if ($percent >= 80) {		return EACH_CLASS_80PER_65P;	} else {		return 0;	}}function each_class_50per_8p($class) {	global $count_hs, $db_info;		$count_subject = count(explode('|', $db_info['subject']));		$arr_class_point = arr_class_point($class);	$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] >= 8) {			$count++;		}	}		$percent = percent($count, $count_hs[$class]*$count_subject, false);		if ($percent >= 50) {		return EACH_CLASS_50PER_8P;	} else {		return 0;	}}function each_class_5per_10p($class) {	global $count_hs, $db_info;		$count_subject = count(explode('|', $db_info['subject']));		$arr_class_point = arr_class_point($class);	$count = 0;	for ($i = 0; $i <= (count($arr_class_point)-1); $i++) {		if ($arr_class_point[$i] == 10) {			$count++;		}	}		$percent = percent($count, $count_hs[$class]*$count_subject, false);		if ($percent >= 5) {		return EACH_CLASS_5PER_10P;	} else {		return 0;	}}function each_class_top_2hs_h($class) {	global $top_hs_dtb;		$top3_h[] = arr_cut($top_hs_dtb['first'], 1);	$top3_h[] = arr_cut($top_hs_dtb['first'], 2);	$top3_h[] = arr_cut($top_hs_dtb['first'], 3);	$count = 0;	for ($i = 0; $i <= 2; $i++) {		foreach ($top3_h[$i] as $sbd => $point) {			if (sbd2class($sbd) == $class) {				$count++;			}		}	}		if ($count == 2) {		return true;	} else {		return false;	}}function each_class_top_3hs_h($class) {	global $top_hs_dtb;		$top3_h[] = arr_cut($top_hs_dtb['first'], 1);	$top3_h[] = arr_cut($top_hs_dtb['first'], 2);	$top3_h[] = arr_cut($top_hs_dtb['first'], 3);	$count = 0;	for ($i = 0; $i <= 2; $i++) {		foreach ($top3_h[$i] as $sbd => $point) {			if (sbd2class($sbd) == $class) {				$count++;			}		}	}		if ($count == 3) {		return true;	} else {		return false;	}}################		FUNCTION BỔ TRỢ			##############################################################################################function top_hs($bxh_number = 15) {	global $sql, $db_id, $db_info;		$subject_arr = explode('|', $db_info['subject']);	$sid_arr = unserialize(SUBJECT);		for ($i = 0; $i <= (count($subject_arr)-1); $i++) {		$sid[] = 'sid'.$sid_arr[$subject_arr[$i]];	}	$sid = implode(',', $sid);			$search = $sql->setquery("SELECT sbd,hsname,$sid FROM database_$db_id");		while ($result = mysql_fetch_row($search)) {		$data[] = $result;	}		for ($i = 0; $i <= count($data)-1; $i++) {		$point = 0;		for($k = 2; $k <= (count($subject_arr)+2); $k++) {			$point = $point + $data[$i][$k-1];		}		$point = round($point/count($subject_arr), 3);		$hs_dtb[$data[$i][0]] = $point;	}			//top hs first 	asort($hs_dtb);	$i = 0;	foreach ($hs_dtb as $key => $val) {		if ($i >= (count($hs_dtb)-$bxh_number)) {			$hs_dtb_first[$key] = $val;		}		$i++;	}	arsort($hs_dtb_first);					//top hs last 	arsort($hs_dtb);	$i = 0;	foreach ($hs_dtb as $key => $val) {		if ($i >= (count($hs_dtb)-$bxh_number)) {			$hs_dtb_last[$key] = $val;		}		$i++;	}	asort($hs_dtb_last);		return array('first'=>$hs_dtb_first, 'last'=>$hs_dtb_last);}function sbd2class($sbd) {	global $sql, $db_id;	$sbd = intval($sbd);	$search = $sql->setquery("SELECT class FROM database_$db_id WHERE sbd=$sbd");	$result = mysql_fetch_assoc($search);		return $result['class'];}function list_class($db_id) {	global $sql;		$search = $sql->setquery("SELECT DISTINCT class FROM database_$db_id ORDER BY class");		while ($data = mysql_fetch_assoc($search)) {		$list_class[] = $data['class'];	}			return $list_class;}function arr_class_point($class) {	global $sql, $db_id;	$search = $sql->setquery("SELECT * FROM database_$db_id WHERE class='$class'");		$num_subject = (mysql_num_fields($search)-3)/2;	while ($data_ = mysql_fetch_row($search)) {		$step = 1;		$sub = 3;		do {			$data[] = $data_[$sub];			$step++;			$sub = $sub + 2;		} while ($step <= $num_subject);	}		return $data;}function arr_cut($arr, $stt) {	$step = 1;	foreach ($arr as $key => $val) {		if ($step == $stt) {			return array($key => $val);		}		$step++;	}}function dtb_class($class) {	global $sql, $db_id, $db_info;	$subject_arr = explode('|', $db_info['subject']);	$sid_arr = unserialize(SUBJECT);	$avg = 0;	for ($i = 0; $i <= (count($subject_arr)-1); $i++) {		$sid = 'sid'.$sid_arr[$subject_arr[$i]];		$avg_point = mysql_fetch_assoc($sql->setquery("SELECT AVG($sid) AS avg FROM database_$db_id WHERE class='$class'"));		$avg = $avg + $avg_point['avg'];	}			$avg = $avg/count($subject_arr);	return $avg;}function variance_class($class) {	global $sql, $db_id, $db_info;	$subject_arr = explode('|', $db_info['subject']);	$sid_arr = unserialize(SUBJECT);	$phsai = 0;	for ($i = 0; $i <= (count($subject_arr)-1); $i++) {		$sid = 'sid'.$sid_arr[$subject_arr[$i]];		$phsai_ = mysql_fetch_row($sql->setquery("SELECT VARIANCE($sid) FROM database_$db_id WHERE class='$class'"));		$phsai = $phsai + $phsai_[0];	}		$phsai = $phsai/count($subject_arr);	return $phsai;}function class_variance($list_class) {	$class_variance_arr = array();	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$class_variance_arr[$list_class[$i]] = variance_class($list_class[$i]);	}	arsort($class_variance_arr);		return $class_variance_arr;}function class_dtb($list_class) {	$class_dtb_arr = array();	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$class_dtb_arr[$list_class[$i]] = dtb_class($list_class[$i]);	}	arsort($class_dtb_arr);		return $class_dtb_arr;}function class_top_10p($list_class) {		$class_top_10p = array();	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$class_top_10p[$list_class[$i]] = each_hs_10p($list_class[$i]);	}	arsort($class_top_10p);		return $class_top_10p;}function class_top_8p_10p($list_class) {		$class_top_8p_10p = array();	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$class_top_8p_10p[$list_class[$i]] = each_hs_8p_10p($list_class[$i]);	}	arsort($class_top_8p_10p);		return $class_top_8p_10p;}function class_top_5p($list_class) {	$class_top_8p_10p = array();	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$class_top_8p_10p[$list_class[$i]] = each_l5p($list_class[$i]);	}	arsort($class_top_8p_10p);		return $class_top_8p_10p;}function top3($arr) {	$top = array_unique($arr);	if (count($top) > 3) {		$top = array_merge(arr_cut($top, 1), arr_cut($top, 2), arr_cut($top, 3));		return array_values($top);	} elseif (count($top) == 3) {		return array_values($top);	} elseif (count($top) == 2) {		return array_merge(array_values($top), (array)0);	} else {		return array_merge(array_values($top), (array)0, (array)0);	}	}function count_hs($list_class) {	global $sql, $db_id;	for ($i = 0; $i <= (count($list_class)-1); $i++) {		$count = mysql_num_rows($sql->setquery('SELECT `sbd` FROM `database_'.$db_id.'` WHERE `class` = \''.$list_class[$i].'\''));		$count_hs[$list_class[$i]] = $count;	}		return $count_hs;}?>